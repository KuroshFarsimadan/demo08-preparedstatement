package ir.kuroshfarsimadan.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ir.kuroshfarsimadan.bean.Person;

public class PersonDAO {

	/**
	 * Constructor for loading the database connection driver
	 */
	public PersonDAO() throws DAOException {
		try {
			Class.forName(DBConnectionProperties.getInstance().getProperty("driver")).newInstance();
		} catch (Exception e) {
			throw new DAOException("The database driver could not loaded.", e);
		}
	}

	/**
	 * Open the database connection
	 * 
	 * @return Opened database connection
	 * @throws Exception if opening the connection is not successful
	 */
	private Connection openConnection() throws DAOException {

		try {
			return DriverManager.getConnection(DBConnectionProperties.getInstance().getProperty("url"),
					DBConnectionProperties.getInstance().getProperty("username"),
					DBConnectionProperties.getInstance().getProperty("password"));
		} catch (Exception e) {
			throw new DAOException("Opening the database connection failed.", e);
		}
	}

	/**
	 * Closes the database connection
	 * 
	 * @param conn The connection that needs to be closed
	 */
	private void closeConnection(Connection conn) throws DAOException {
		try {
			if (conn != null && !conn.isClosed())
				conn.close();
		} catch (Exception e) {
			throw new DAOException("Database connection refuses to close.", e);
		}
	}

	/**
	 * Retrieves all the persons from the database
	 * 
	 * @return person list
	 */
	public List<Person> retrieveAll() throws DAOException {

		ArrayList<Person> persons = new ArrayList<Person>();

		// Opening the connection
		Connection conn = openConnection();

		try {

			// Execute the search
			String sql = "select id, firstname, lastname from person";
			// The object used for executing a static SQL statement and returning the
			// results it produces.
			// (https://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html)
			Statement search = conn.createStatement();
			// A table of data representing a database result set, which is usually
			// generated by executing a statement that queries the database.
			// (https://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html)
			ResultSet results = search.executeQuery(sql);

			// Go through the search results
			while (results.next()) {
				int id = results.getInt("id");
				String firstname = results.getString("firstname");
				String lastname = results.getString("lastname");

				// Adding a new person to a list
				Person h = new Person(id, firstname, lastname);
				persons.add(h);
			}

		} catch (Exception e) {
			// An error occurred
			throw new DAOException("Database search caused an error.", e);
		} finally {
			// Closing the connection
			closeConnection(conn);
		}

		System.out.println("Retrieved the persons: " + persons.toString());

		return persons;
	}

	/**
	 * Add a person to database
	 * 
	 * @param h Person information that will be added
	 */
	public void add(Person h) throws DAOException {

		// Opening the connection
		Connection conn = openConnection();

		try {

			// Executing the search
			// Initializing the sql-statement
			String sql = "insert into person(firstname, lastname) values(?,?)";
			PreparedStatement stmnt = conn.prepareStatement(sql);

			// Filling out the missing informaiton
			stmnt.setString(1, h.getFirstname());
			stmnt.setString(2, h.getLastname());

			// Executing the statement suoritetaan lause
			stmnt.executeUpdate();
			System.out.println("Added a person to database: " + h);
		} catch (Exception e) {
			// An error occured
			throw new DAOException("Adding a person caused an error.", e);
		} finally {
			// Close the connection
			closeConnection(conn);
		}

	}

}